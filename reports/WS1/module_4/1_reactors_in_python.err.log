Traceback (most recent call last):
  File "C:\Users\arnaou\AppData\Local\miniconda3\envs\dig4bio\Lib\site-packages\jupyter_cache\executors\utils.py", line 58, in single_nb_execution
    executenb(
  File "C:\Users\arnaou\AppData\Local\miniconda3\envs\dig4bio\Lib\site-packages\nbclient\client.py", line 1314, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\arnaou\AppData\Local\miniconda3\envs\dig4bio\Lib\site-packages\jupyter_core\utils\__init__.py", line 165, in wrapped
    return loop.run_until_complete(inner)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\arnaou\AppData\Local\miniconda3\envs\dig4bio\Lib\asyncio\base_events.py", line 654, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File "C:\Users\arnaou\AppData\Local\miniconda3\envs\dig4bio\Lib\site-packages\nbclient\client.py", line 709, in async_execute
    await self.async_execute_cell(
  File "C:\Users\arnaou\AppData\Local\miniconda3\envs\dig4bio\Lib\site-packages\nbclient\client.py", line 1062, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "C:\Users\arnaou\AppData\Local\miniconda3\envs\dig4bio\Lib\site-packages\nbclient\client.py", line 918, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
# in the code we can make a loop to check whether the V is constant
# otherwise print something
# this might help you in the future
import numpy as np

def first_order_reaction_batch(C_ratio, t, V='constant'):
    '''
    Given the solved equation for an ideal batch reactor and the time, 
    this function returns the rate constant for a first order reaction.
    Args:
        C_ratio (float): Concentration of A, given by CA/CA0 ratio.
        t (int): time necessary to reach given concentration of A.
    returns:
        k (float): rate constant.
    '''
    if V == 'constant':   
        k = -np.log(C_ratio)/t
    else:
        print('V should be constant in this exercise')         
    return k

def first_order_time(C_ratio, k):
    '''
    Given the solved equation for an ideal batch reactor 
    and the previously calculated rate constant, 
    this function returns the time (how much longer the reaction 
    must continue to obtain CA/CA0 = 0.001).
    
    Args:
        C_ratio (float): Concentration of A, given by CA/CA0 ratio.
        k (float): rate constant.
    returns:
        t (int): time necessary to reach given concentration of A.
    '''
    t = -np.log(C_ratio)/k
    return round(t)
    
t1 = 1
CA_CA0_1h = 0.1
CA_CA0_t = 0.001
k_first_order = first_order_reaction_batch(CA_CA0_1h, t1)
print(f'The rate constant is: {round(k_first_order, 2)}')
t2 = first_order_time(CA_CA0_t, k_first_order)

time = t2 - t1
print(f"Time needed to reach given concentration of A is: {time} hours")
------------------


[1;31m---------------------------------------------------------------------------[0m
[1;31mModuleNotFoundError[0m                       Traceback (most recent call last)
Cell [1;32mIn[1], line 4[0m
[0;32m      1[0m [38;5;66;03m# in the code we can make a loop to check whether the V is constant[39;00m
[0;32m      2[0m [38;5;66;03m# otherwise print something[39;00m
[0;32m      3[0m [38;5;66;03m# this might help you in the future[39;00m
[1;32m----> 4[0m [38;5;28;01mimport[39;00m [38;5;21;01mnumpy[39;00m [38;5;28;01mas[39;00m [38;5;21;01mnp[39;00m
[0;32m      6[0m [38;5;28;01mdef[39;00m [38;5;21mfirst_order_reaction_batch[39m(C_ratio, t, V[38;5;241m=[39m[38;5;124m'[39m[38;5;124mconstant[39m[38;5;124m'[39m):
[0;32m      7[0m [38;5;250m    [39m[38;5;124;03m'''[39;00m
[0;32m      8[0m [38;5;124;03m    Given the solved equation for an ideal batch reactor and the time, [39;00m
[0;32m      9[0m [38;5;124;03m    this function returns the rate constant for a first order reaction.[39;00m
[1;32m   (...)[0m
[0;32m     14[0m [38;5;124;03m        k (float): rate constant.[39;00m
[0;32m     15[0m [38;5;124;03m    '''[39;00m

[1;31mModuleNotFoundError[0m: No module named 'numpy'

